"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Lint = require("../lint");
var ts = require("typescript");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (sourceFile) {
        var languageService = Lint.createLanguageService(sourceFile.fileName, sourceFile.getFullText());
        return this.applyWithWalker(new PreferForOfWalker(sourceFile, this.getOptions(), languageService));
    };
    Rule.metadata = {
        ruleName: "prefer-for-of",
        description: "Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated.",
        rationale: "A for(... of ...) loop is easier to implement and read when the index is not needed.",
        optionsDescription: "Not configurable.",
        options: null,
        optionExamples: ["true"],
        type: "typescript",
    };
    Rule.FAILURE_STRING = "Expected a 'for-of' loop instead of a 'for' loop with this simple iteration";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var PreferForOfWalker = (function (_super) {
    __extends(PreferForOfWalker, _super);
    function PreferForOfWalker(sourceFile, options, languageService) {
        _super.call(this, sourceFile, options);
        this.languageService = languageService;
    }
    PreferForOfWalker.prototype.visitForStatement = function (node) {
        var arrayAccessNode = this.locateArrayNodeInForLoop(node);
        if (arrayAccessNode !== undefined) {
            if (arrayAccessNode.kind === ts.SyntaxKind.PropertyAccessExpression && arrayAccessNode.getLastToken().getText() === "length") {
                var incrementorVariable = node.incrementor.getFirstToken();
                if (/\+|-/g.test(incrementorVariable.getText())) {
                    incrementorVariable = node.incrementor.getLastToken();
                }
                var arrayToken = arrayAccessNode.getChildAt(0);
                var loopSyntaxText = node.statement.getText();
                var fileName = this.getSourceFile().fileName;
                var highlights = this.languageService.getDocumentHighlights(fileName, incrementorVariable.getStart(), [fileName]);
                if (highlights && highlights.length > 0) {
                    var incrementorCount = highlights[0].highlightSpans.length - 3;
                    var arrayTokenForRegex = arrayToken.getText().replace(".", "\\.");
                    var incrementorForRegex = incrementorVariable.getText().replace(".", "\\.");
                    var regex = new RegExp(arrayTokenForRegex + "\\[\\s*" + incrementorForRegex + "\\s*\\]", "g");
                    var accessMatches = loopSyntaxText.match(regex);
                    var matchCount = (accessMatches || []).length;
                    if (matchCount >= incrementorCount) {
                        var failure = this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING);
                        this.addFailure(failure);
                    }
                }
            }
        }
        _super.prototype.visitForStatement.call(this, node);
    };
    PreferForOfWalker.prototype.locateArrayNodeInForLoop = function (forLoop) {
        if (forLoop.condition !== undefined) {
            var arrayAccessNode = forLoop.condition.getChildAt(2);
            if (arrayAccessNode.kind !== ts.SyntaxKind.PropertyAccessExpression && forLoop.initializer !== undefined) {
                for (var _i = 0, _a = forLoop.initializer.getChildren(); _i < _a.length; _i++) {
                    var initNode = _a[_i];
                    if (initNode.kind === ts.SyntaxKind.SyntaxList) {
                        for (var _b = 0, _c = initNode.getChildren(); _b < _c.length; _b++) {
                            var initVar = _c[_b];
                            if (initVar.kind === ts.SyntaxKind.VariableDeclaration) {
                                for (var _d = 0, _e = initVar.getChildren(); _d < _e.length; _d++) {
                                    var initVarPart = _e[_d];
                                    if (initVarPart.kind === ts.SyntaxKind.PropertyAccessExpression) {
                                        arrayAccessNode = initVarPart;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return arrayAccessNode;
        }
        else {
            return undefined;
        }
    };
    return PreferForOfWalker;
}(Lint.RuleWalker));
